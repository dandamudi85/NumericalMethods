import numpy as np

A = [[1, 2, 4],
     [0, 0, 5],
     [0, 3, 6]]
A = np.array(A,dtype = float)

Q,R = np.linalg.qr(A)
print(f"Q from Builtin Function :\n {Q}")

def calculate_R(A_Matrix,q_Matrix):
    length = len(A_Matrix)
    R_Matrix =  np.zeros((length,length))
    for row in range(length):
        q_Vector = q_Matrix[:,row]
        for col in range(row,length):
            A_Vector = A_Matrix[:,col]
            R_Matrix[row,col] = np.dot(A_Vector,q_Vector)
    return R_Matrix

def gramSchmidt(A_Matrix):
    length = len(A_Matrix)
    q_Matrix = np.zeros((length,length))
    q_Matrix[:,0] = A_Matrix[:,0]/np.linalg.norm(A_Matrix[:,0])
    #Calculate Q from A
    for col in range(1,length):
        A_vector = A_Matrix[:,col] # First Column
        temp = np.zeros(length).T
        for i in range(col):
            q_Vector = q_Matrix[:,i]
            temp = temp + (np.dot(np.dot(A_vector,q_Vector),q_Vector))  # Fromula A3Perpendicular = A3 - (A3.Q1).Q1 - (A3.Q2)Q2
        A_Vector_Perpend = A_vector - temp
        A_Vector_Perpend = A_Vector_Perpend/np.linalg.norm(A_Vector_Perpend) #Normalize
        q_Matrix[:,col] = A_Vector_Perpend

    R_Matrix = calculate_R(A_Matrix,q_Matrix)
    
    return q_Matrix,R_Matrix
        

q_Matrix,R_Matrix = gramSchmidt(A.copy())
print(q_Matrix)
print(R_Matrix)
